
test3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000be0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000be0  00000c54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000021fc  00000000  00000000  00000c60  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000008c7  00000000  00000000  00002e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00003723  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 000000f0  00000000  00000000  00003752  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001108  00000000  00000000  00003842  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000710  00000000  00000000  0000494a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009b7  00000000  00000000  0000505a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000022c  00000000  00000000  00005a14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c7  00000000  00000000  00005c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c57  00000000  00000000  00006007  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00006c5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	24 c0       	rjmp	.+72     	; 0x4c <__bad_interrupt>
   4:	23 c0       	rjmp	.+70     	; 0x4c <__bad_interrupt>
   6:	22 c0       	rjmp	.+68     	; 0x4c <__bad_interrupt>
   8:	21 c0       	rjmp	.+66     	; 0x4c <__bad_interrupt>
   a:	20 c0       	rjmp	.+64     	; 0x4c <__bad_interrupt>
   c:	1f c0       	rjmp	.+62     	; 0x4c <__bad_interrupt>
   e:	1e c0       	rjmp	.+60     	; 0x4c <__bad_interrupt>
  10:	1d c0       	rjmp	.+58     	; 0x4c <__bad_interrupt>
  12:	1c c0       	rjmp	.+56     	; 0x4c <__bad_interrupt>
  14:	1b c0       	rjmp	.+54     	; 0x4c <__bad_interrupt>
  16:	1a c0       	rjmp	.+52     	; 0x4c <__bad_interrupt>
  18:	19 c0       	rjmp	.+50     	; 0x4c <__bad_interrupt>
  1a:	18 c0       	rjmp	.+48     	; 0x4c <__bad_interrupt>
  1c:	17 c0       	rjmp	.+46     	; 0x4c <__bad_interrupt>
  1e:	16 c0       	rjmp	.+44     	; 0x4c <__bad_interrupt>
  20:	15 c0       	rjmp	.+42     	; 0x4c <__bad_interrupt>
  22:	14 c0       	rjmp	.+40     	; 0x4c <__bad_interrupt>
  24:	13 c0       	rjmp	.+38     	; 0x4c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e0 ee       	ldi	r30, 0xE0	; 224
  3a:	fb e0       	ldi	r31, 0x0B	; 11
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	ac 36       	cpi	r26, 0x6C	; 108
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>
  48:	11 d0       	rcall	.+34     	; 0x6c <main>
  4a:	c8 c5       	rjmp	.+2960   	; 0xbdc <_exit>

0000004c <__bad_interrupt>:
  4c:	d9 cf       	rjmp	.-78     	; 0x0 <__vectors>

0000004e <USARTInit>:
void USARTInit(uint16_t ubrr_value)
{

   //Set Baud rate

   UBRRL = ubrr_value;
  4e:	89 b9       	out	0x09, r24	; 9
   UBRRH = (ubrr_value>>8);
  50:	90 bd       	out	0x20, r25	; 32

   >> char size 8

   */

   UCSRC=(1<<URSEL)|(3<<UCSZ0);
  52:	86 e8       	ldi	r24, 0x86	; 134
  54:	80 bd       	out	0x20, r24	; 32


   //Enable The receiver and transmitter

   UCSRB=(1<<RXEN)|(1<<TXEN);
  56:	88 e1       	ldi	r24, 0x18	; 24
  58:	8a b9       	out	0x0a, r24	; 10
  5a:	08 95       	ret

0000005c <USARTReadChar>:
//available.
char USARTReadChar(void)
{
   //Wait untill a data is available

   while(!(UCSRA & (1<<RXC)))
  5c:	5f 9b       	sbis	0x0b, 7	; 11
  5e:	fe cf       	rjmp	.-4      	; 0x5c <USARTReadChar>
   }

   //Now USART has got data from host
   //and is available is buffer

   return UDR;
  60:	8c b1       	in	r24, 0x0c	; 12
}
  62:	08 95       	ret

00000064 <USARTWriteChar>:
//the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready

   while(!(UCSRA & (1<<UDRE)))
  64:	5d 9b       	sbis	0x0b, 5	; 11
  66:	fe cf       	rjmp	.-4      	; 0x64 <USARTWriteChar>
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR=data;
  68:	8c b9       	out	0x0c, r24	; 12
  6a:	08 95       	ret

0000006c <main>:




int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
  74:	64 97       	sbiw	r28, 0x14	; 20
  76:	0f b6       	in	r0, 0x3f	; 63
  78:	f8 94       	cli
  7a:	de bf       	out	0x3e, r29	; 62
  7c:	0f be       	out	0x3f, r0	; 63
  7e:	cd bf       	out	0x3d, r28	; 61
	char data;

	
	

   USARTInit(MYUBRR);
  80:	83 e3       	ldi	r24, 0x33	; 51
  82:	90 e0       	ldi	r25, 0x00	; 0
  84:	e4 df       	rcall	.-56     	; 0x4e <USARTInit>
		

	TCCR1A  |= (1<<COM1A1) | (1<<WGM11);
  86:	8f b5       	in	r24, 0x2f	; 47
  88:	82 68       	ori	r24, 0x82	; 130
  8a:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |=  (1<<WGM13) | (1<<WGM12) | (1<<CS11);
  8c:	8e b5       	in	r24, 0x2e	; 46
  8e:	8a 61       	ori	r24, 0x1A	; 26
  90:	8e bd       	out	0x2e, r24	; 46
	
	ICR1 = 20000;
  92:	80 e2       	ldi	r24, 0x20	; 32
  94:	9e e4       	ldi	r25, 0x4E	; 78
  96:	97 bd       	out	0x27, r25	; 39
  98:	86 bd       	out	0x26, r24	; 38
	
	DDRB |= (1<<PB1);
  9a:	b9 9a       	sbi	0x17, 1	; 23
	
	set_output(DDRB, PB0); 
  9c:	b8 9a       	sbi	0x17, 0	; 23

OCR1A=1400;
  9e:	88 e7       	ldi	r24, 0x78	; 120
  a0:	95 e0       	ldi	r25, 0x05	; 5
  a2:	9b bd       	out	0x2b, r25	; 43
  a4:	8a bd       	out	0x2a, r24	; 42

   while(1)
   {
	   char x[20] = {0};
  a6:	88 24       	eor	r8, r8
  a8:	83 94       	inc	r8
  aa:	91 2c       	mov	r9, r1
  ac:	8c 0e       	add	r8, r28
  ae:	9d 1e       	adc	r9, r29
}




int main(void)
  b0:	5e 01       	movw	r10, r28
  b2:	26 e0       	ldi	r18, 0x06	; 6
  b4:	a2 0e       	add	r10, r18
  b6:	b1 1c       	adc	r11, r1
   while(1)
   {
	   char x[20] = {0};
	   therm_read_temperature(x);
	   for(int i=0; i<5; i++){
		   USARTWriteChar(x[i]);
  b8:	0f 2e       	mov	r0, r31
  ba:	f4 e6       	ldi	r31, 0x64	; 100
  bc:	cf 2e       	mov	r12, r31
  be:	d1 2c       	mov	r13, r1
  c0:	f0 2d       	mov	r31, r0
		data=USARTReadChar(); 
		if (data==0x31)
		{
			//todo (move servo to 2000)
			for(int j=0; j<10;j++){
				OCR1A +=25;
  c2:	0f 2e       	mov	r0, r31
  c4:	fc e2       	ldi	r31, 0x2C	; 44
  c6:	ef 2e       	mov	r14, r31
  c8:	ff 24       	eor	r15, r15
  ca:	f3 94       	inc	r15
  cc:	f0 2d       	mov	r31, r0
			while(OCR1A>1400){
				OCR1A -=50;
				for(int i=0;i<300;i++)
				_delay_ms(10);
			}
			OCR1A=1400;
  ce:	0f 2e       	mov	r0, r31
  d0:	f8 ee       	ldi	r31, 0xE8	; 232
  d2:	6f 2e       	mov	r6, r31
  d4:	f3 e0       	ldi	r31, 0x03	; 3
  d6:	7f 2e       	mov	r7, r31
  d8:	f0 2d       	mov	r31, r0

OCR1A=1400;

   while(1)
   {
	   char x[20] = {0};
  da:	f4 01       	movw	r30, r8
  dc:	24 e1       	ldi	r18, 0x14	; 20
  de:	11 92       	st	Z+, r1
  e0:	2a 95       	dec	r18
  e2:	e9 f7       	brne	.-6      	; 0xde <main+0x72>
	   therm_read_temperature(x);
  e4:	c4 01       	movw	r24, r8
  e6:	ef d0       	rcall	.+478    	; 0x2c6 <therm_read_temperature>
  e8:	84 01       	movw	r16, r8
	   for(int i=0; i<5; i++){
		   USARTWriteChar(x[i]);
  ea:	f8 01       	movw	r30, r16
  ec:	81 91       	ld	r24, Z+
  ee:	8f 01       	movw	r16, r30
  f0:	b9 df       	rcall	.-142    	; 0x64 <USARTWriteChar>
  f2:	c6 01       	movw	r24, r12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	e3 ec       	ldi	r30, 0xC3	; 195
  f6:	f9 e0       	ldi	r31, 0x09	; 9
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <main+0x8c>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x92>
  fe:	00 00       	nop
 100:	01 97       	sbiw	r24, 0x01	; 1
		   for (int i=0; i<100; i++) _delay_ms(10);
 102:	c1 f7       	brne	.-16     	; 0xf4 <main+0x88>

   while(1)
   {
	   char x[20] = {0};
	   therm_read_temperature(x);
	   for(int i=0; i<5; i++){
 104:	0a 15       	cp	r16, r10
 106:	1b 05       	cpc	r17, r11
 108:	81 f7       	brne	.-32     	; 0xea <main+0x7e>
		   USARTWriteChar(x[i]);
		   for (int i=0; i<100; i++) _delay_ms(10);
	   }
	    float num = (x[1]-48)*10+(x[2]-48)+ (x[4]-48)*0.1;
 10a:	8a 81       	ldd	r24, Y+2	; 0x02
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	bc 01       	movw	r22, r24
 114:	66 0f       	add	r22, r22
 116:	77 1f       	adc	r23, r23
 118:	66 0f       	add	r22, r22
 11a:	77 1f       	adc	r23, r23
 11c:	86 0f       	add	r24, r22
 11e:	97 1f       	adc	r25, r23
 120:	2b 81       	ldd	r18, Y+3	; 0x03
 122:	bc 01       	movw	r22, r24
 124:	62 0f       	add	r22, r18
 126:	71 1d       	adc	r23, r1
 128:	60 51       	subi	r22, 0x10	; 16
 12a:	72 40       	sbci	r23, 0x02	; 2
 12c:	88 27       	eor	r24, r24
 12e:	77 fd       	sbrc	r23, 7
 130:	80 95       	com	r24
 132:	98 2f       	mov	r25, r24
 134:	79 d1       	rcall	.+754    	; 0x428 <__floatsisf>
 136:	1b 01       	movw	r2, r22
 138:	2c 01       	movw	r4, r24
 13a:	6d 81       	ldd	r22, Y+5	; 0x05
 13c:	70 e0       	ldi	r23, 0x00	; 0
 13e:	60 53       	subi	r22, 0x30	; 48
 140:	71 09       	sbc	r23, r1
 142:	88 27       	eor	r24, r24
 144:	77 fd       	sbrc	r23, 7
 146:	80 95       	com	r24
 148:	98 2f       	mov	r25, r24
 14a:	6e d1       	rcall	.+732    	; 0x428 <__floatsisf>
 14c:	2d ec       	ldi	r18, 0xCD	; 205
 14e:	3c ec       	ldi	r19, 0xCC	; 204
 150:	4c ec       	ldi	r20, 0xCC	; 204
 152:	5d e3       	ldi	r21, 0x3D	; 61
 154:	1d d2       	rcall	.+1082   	; 0x590 <__mulsf3>
 156:	9b 01       	movw	r18, r22
 158:	ac 01       	movw	r20, r24
 15a:	c2 01       	movw	r24, r4
 15c:	b1 01       	movw	r22, r2
 15e:	fa d0       	rcall	.+500    	; 0x354 <__addsf3>
 160:	46 2e       	mov	r4, r22
 162:	57 2e       	mov	r5, r23
 164:	08 2f       	mov	r16, r24
 166:	19 2f       	mov	r17, r25
		
		if(num>=26.0)
 168:	20 e0       	ldi	r18, 0x00	; 0
 16a:	30 e0       	ldi	r19, 0x00	; 0
 16c:	40 ed       	ldi	r20, 0xD0	; 208
 16e:	51 e4       	ldi	r21, 0x41	; 65
 170:	0b d2       	rcall	.+1046   	; 0x588 <__gesf2>
 172:	88 23       	and	r24, r24
 174:	0c f0       	brlt	.+2      	; 0x178 <main+0x10c>
		 output_low(PORTB, PB0); 
 176:	c0 98       	cbi	0x18, 0	; 24
			
			if(num<26.0) output_high(PORTB, PB0);
 178:	20 e0       	ldi	r18, 0x00	; 0
 17a:	30 e0       	ldi	r19, 0x00	; 0
 17c:	40 ed       	ldi	r20, 0xD0	; 208
 17e:	51 e4       	ldi	r21, 0x41	; 65
 180:	64 2d       	mov	r22, r4
 182:	75 2d       	mov	r23, r5
 184:	80 2f       	mov	r24, r16
 186:	91 2f       	mov	r25, r17
 188:	49 d1       	rcall	.+658    	; 0x41c <__cmpsf2>
 18a:	88 23       	and	r24, r24
 18c:	0c f4       	brge	.+2      	; 0x190 <main+0x124>
 18e:	c0 9a       	sbi	0x18, 0	; 24
		
		data=USARTReadChar(); 
 190:	65 df       	rcall	.-310    	; 0x5c <USARTReadChar>
		if (data==0x31)
 192:	81 33       	cpi	r24, 0x31	; 49
 194:	a9 f4       	brne	.+42     	; 0x1c0 <main+0x154>
 196:	2a e0       	ldi	r18, 0x0A	; 10
 198:	30 e0       	ldi	r19, 0x00	; 0
		{
			//todo (move servo to 2000)
			for(int j=0; j<10;j++){
				OCR1A +=25;
 19a:	8a b5       	in	r24, 0x2a	; 42
 19c:	9b b5       	in	r25, 0x2b	; 43
 19e:	49 96       	adiw	r24, 0x19	; 25
 1a0:	9b bd       	out	0x2b, r25	; 43
 1a2:	8a bd       	out	0x2a, r24	; 42
 1a4:	c7 01       	movw	r24, r14
 1a6:	e3 ec       	ldi	r30, 0xC3	; 195
 1a8:	f9 e0       	ldi	r31, 0x09	; 9
 1aa:	31 97       	sbiw	r30, 0x01	; 1
 1ac:	f1 f7       	brne	.-4      	; 0x1aa <main+0x13e>
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <main+0x144>
 1b0:	00 00       	nop
 1b2:	01 97       	sbiw	r24, 0x01	; 1
				for(int i=0;i<300;i++)
 1b4:	c1 f7       	brne	.-16     	; 0x1a6 <main+0x13a>
 1b6:	21 50       	subi	r18, 0x01	; 1
 1b8:	31 09       	sbc	r19, r1
		
		data=USARTReadChar(); 
		if (data==0x31)
		{
			//todo (move servo to 2000)
			for(int j=0; j<10;j++){
 1ba:	79 f7       	brne	.-34     	; 0x19a <main+0x12e>
				for(int i=0;i<300;i++)
				_delay_ms(10);
			}
			
			
			USARTWriteChar('S');
 1bc:	83 e5       	ldi	r24, 0x53	; 83
 1be:	52 df       	rcall	.-348    	; 0x64 <USARTWriteChar>
		
		
		
		
		
		if(OCR1A>1400)
 1c0:	8a b5       	in	r24, 0x2a	; 42
 1c2:	9b b5       	in	r25, 0x2b	; 43
 1c4:	89 37       	cpi	r24, 0x79	; 121
 1c6:	95 40       	sbci	r25, 0x05	; 5
 1c8:	78 f4       	brcc	.+30     	; 0x1e8 <main+0x17c>
 1ca:	87 cf       	rjmp	.-242    	; 0xda <main+0x6e>
		{
			while(OCR1A>1400){
				OCR1A -=50;
 1cc:	8a b5       	in	r24, 0x2a	; 42
 1ce:	9b b5       	in	r25, 0x2b	; 43
 1d0:	c2 97       	sbiw	r24, 0x32	; 50
 1d2:	9b bd       	out	0x2b, r25	; 43
 1d4:	8a bd       	out	0x2a, r24	; 42
 1d6:	c7 01       	movw	r24, r14
 1d8:	e3 ec       	ldi	r30, 0xC3	; 195
 1da:	f9 e0       	ldi	r31, 0x09	; 9
 1dc:	31 97       	sbiw	r30, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <main+0x170>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <main+0x176>
 1e2:	00 00       	nop
 1e4:	01 97       	sbiw	r24, 0x01	; 1
				for(int i=0;i<300;i++)
 1e6:	c1 f7       	brne	.-16     	; 0x1d8 <main+0x16c>
		
		
		
		if(OCR1A>1400)
		{
			while(OCR1A>1400){
 1e8:	8a b5       	in	r24, 0x2a	; 42
 1ea:	9b b5       	in	r25, 0x2b	; 43
 1ec:	89 37       	cpi	r24, 0x79	; 121
 1ee:	95 40       	sbci	r25, 0x05	; 5
 1f0:	68 f7       	brcc	.-38     	; 0x1cc <main+0x160>
				OCR1A -=50;
				for(int i=0;i<300;i++)
				_delay_ms(10);
			}
			OCR1A=1400;
 1f2:	88 e7       	ldi	r24, 0x78	; 120
 1f4:	95 e0       	ldi	r25, 0x05	; 5
 1f6:	9b bd       	out	0x2b, r25	; 43
 1f8:	8a bd       	out	0x2a, r24	; 42
 1fa:	c3 01       	movw	r24, r6
 1fc:	e3 ec       	ldi	r30, 0xC3	; 195
 1fe:	f9 e0       	ldi	r31, 0x09	; 9
 200:	31 97       	sbiw	r30, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <main+0x194>
 204:	00 c0       	rjmp	.+0      	; 0x206 <main+0x19a>
 206:	00 00       	nop
 208:	01 97       	sbiw	r24, 0x01	; 1
			for(int i=0;i<1000;i++)
 20a:	c1 f7       	brne	.-16     	; 0x1fc <main+0x190>
 20c:	66 cf       	rjmp	.-308    	; 0xda <main+0x6e>

0000020e <therm_delay>:
#include "therm_ds18b20.h"

void therm_delay(uint16_t delay)
{
	while(delay--) asm volatile("nop");
 20e:	9c 01       	movw	r18, r24
 210:	21 50       	subi	r18, 0x01	; 1
 212:	31 09       	sbc	r19, r1
 214:	89 2b       	or	r24, r25
 216:	21 f0       	breq	.+8      	; 0x220 <therm_delay+0x12>
 218:	00 00       	nop
 21a:	21 50       	subi	r18, 0x01	; 1
 21c:	31 09       	sbc	r19, r1
 21e:	e0 f7       	brcc	.-8      	; 0x218 <therm_delay+0xa>
 220:	08 95       	ret

00000222 <therm_reset>:
}


uint8_t therm_reset()
{
 222:	cf 93       	push	r28
	uint8_t i;
	//Pull line low and wait for 480uS
	THERM_LOW();
 224:	ad 98       	cbi	0x15, 5	; 21
	THERM_OUTPUT_MODE();
 226:	a5 9a       	sbi	0x14, 5	; 20
	therm_delay(us(480));
 228:	80 ee       	ldi	r24, 0xE0	; 224
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	f0 df       	rcall	.-32     	; 0x20e <therm_delay>
	//Release line and wait for 60uS
	THERM_INPUT_MODE();
 22e:	a5 98       	cbi	0x14, 5	; 20
	therm_delay(us(60));
 230:	8c e3       	ldi	r24, 0x3C	; 60
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	ec df       	rcall	.-40     	; 0x20e <therm_delay>
	//Store line value and wait until the completion of 480uS period
	i=(THERM_PIN & (1<<THERM_DQ));
 236:	c3 b3       	in	r28, 0x13	; 19
	therm_delay(us(420));
 238:	84 ea       	ldi	r24, 0xA4	; 164
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	e8 df       	rcall	.-48     	; 0x20e <therm_delay>
	//Return the value read from the presence pulse (0=OK, 1=WRONG)
	return i;
}
 23e:	8c 2f       	mov	r24, r28
 240:	80 72       	andi	r24, 0x20	; 32
 242:	cf 91       	pop	r28
 244:	08 95       	ret

00000246 <therm_write_bit>:

void therm_write_bit(uint8_t bit)
{
 246:	cf 93       	push	r28
 248:	c8 2f       	mov	r28, r24
	//Pull line low for 1uS
	THERM_LOW();
 24a:	ad 98       	cbi	0x15, 5	; 21
	THERM_OUTPUT_MODE();
 24c:	a5 9a       	sbi	0x14, 5	; 20
	therm_delay(us(1));
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	dd df       	rcall	.-70     	; 0x20e <therm_delay>
	//If we want to write 1, release the line (if not will keep low)
	if(bit) THERM_INPUT_MODE();
 254:	c1 11       	cpse	r28, r1
 256:	a5 98       	cbi	0x14, 5	; 20
	//Wait for 60uS and release the line
	therm_delay(us(60));
 258:	8c e3       	ldi	r24, 0x3C	; 60
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	d8 df       	rcall	.-80     	; 0x20e <therm_delay>
	THERM_INPUT_MODE();
 25e:	a5 98       	cbi	0x14, 5	; 20
}
 260:	cf 91       	pop	r28
 262:	08 95       	ret

00000264 <therm_read_bit>:

uint8_t therm_read_bit(void)
{
 264:	cf 93       	push	r28
	uint8_t bit=0;
	//Pull line low for 1uS
	THERM_LOW();
 266:	ad 98       	cbi	0x15, 5	; 21
	THERM_OUTPUT_MODE();
 268:	a5 9a       	sbi	0x14, 5	; 20
	therm_delay(us(1));
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	cf df       	rcall	.-98     	; 0x20e <therm_delay>
	//Release line and wait for 14uS
	THERM_INPUT_MODE();
 270:	a5 98       	cbi	0x14, 5	; 20
	therm_delay(us(14));
 272:	8e e0       	ldi	r24, 0x0E	; 14
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	cb df       	rcall	.-106    	; 0x20e <therm_delay>
	//Read line value
	if(THERM_PIN&(1<<THERM_DQ)) bit=1;
 278:	c3 b3       	in	r28, 0x13	; 19
	//Wait for 45uS to end and return read value
	therm_delay(us(45));
 27a:	8d e2       	ldi	r24, 0x2D	; 45
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	c7 df       	rcall	.-114    	; 0x20e <therm_delay>
	return bit;
}
 280:	c5 fb       	bst	r28, 5
 282:	88 27       	eor	r24, r24
 284:	80 f9       	bld	r24, 0
 286:	cf 91       	pop	r28
 288:	08 95       	ret

0000028a <therm_read_byte>:

uint8_t therm_read_byte(void)
{
 28a:	cf 93       	push	r28
 28c:	df 93       	push	r29
 28e:	c8 e0       	ldi	r28, 0x08	; 8
	uint8_t i=8, n=0;
 290:	d0 e0       	ldi	r29, 0x00	; 0
	while(i--)
	{
		//Shift one position right and store read value
		n>>=1;
		n|=(therm_read_bit()<<7);
 292:	e8 df       	rcall	.-48     	; 0x264 <therm_read_bit>
 294:	20 e8       	ldi	r18, 0x80	; 128
 296:	82 9f       	mul	r24, r18
 298:	c0 01       	movw	r24, r0
 29a:	11 24       	eor	r1, r1
{
	uint8_t i=8, n=0;
	while(i--)
	{
		//Shift one position right and store read value
		n>>=1;
 29c:	d6 95       	lsr	r29
		n|=(therm_read_bit()<<7);
 29e:	d8 2b       	or	r29, r24
 2a0:	c1 50       	subi	r28, 0x01	; 1
}

uint8_t therm_read_byte(void)
{
	uint8_t i=8, n=0;
	while(i--)
 2a2:	b9 f7       	brne	.-18     	; 0x292 <therm_read_byte+0x8>
		//Shift one position right and store read value
		n>>=1;
		n|=(therm_read_bit()<<7);
	}
	return n;
}
 2a4:	8d 2f       	mov	r24, r29
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <therm_write_byte>:

void therm_write_byte(uint8_t byte)
{
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	d8 2f       	mov	r29, r24
 2b2:	c8 e0       	ldi	r28, 0x08	; 8
	uint8_t i=8;
	while(i--)
	{
		//Write actual bit and shift one position right to make the next bit ready
		therm_write_bit(byte&1);
 2b4:	8d 2f       	mov	r24, r29
 2b6:	81 70       	andi	r24, 0x01	; 1
 2b8:	c6 df       	rcall	.-116    	; 0x246 <therm_write_bit>
		byte>>=1;
 2ba:	d6 95       	lsr	r29
 2bc:	c1 50       	subi	r28, 0x01	; 1
}

void therm_write_byte(uint8_t byte)
{
	uint8_t i=8;
	while(i--)
 2be:	d1 f7       	brne	.-12     	; 0x2b4 <therm_write_byte+0x8>
	{
		//Write actual bit and shift one position right to make the next bit ready
		therm_write_bit(byte&1);
		byte>>=1;
	}
}
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	08 95       	ret

000002c6 <therm_read_temperature>:

void therm_read_temperature(char *buffer)
{
 2c6:	0f 93       	push	r16
 2c8:	1f 93       	push	r17
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	d8 2f       	mov	r29, r24
 2d0:	19 2f       	mov	r17, r25
	// Buffer length must be at least 12bytes long! ["+XXX.XXXX C"]
	uint8_t temperature[2];
	int8_t digit;
	uint16_t decimal;
	//Reset, skip ROM and start temperature conversion
	therm_reset();
 2d2:	a7 df       	rcall	.-178    	; 0x222 <therm_reset>
	therm_write_byte(THERM_CMD_SKIPROM);
 2d4:	8c ec       	ldi	r24, 0xCC	; 204
 2d6:	ea df       	rcall	.-44     	; 0x2ac <therm_write_byte>
	therm_write_byte(THERM_CMD_CONVERTTEMP);
 2d8:	84 e4       	ldi	r24, 0x44	; 68
 2da:	e8 df       	rcall	.-48     	; 0x2ac <therm_write_byte>
	//Wait until conversion is complete
	while(!therm_read_bit());
 2dc:	c3 df       	rcall	.-122    	; 0x264 <therm_read_bit>
 2de:	88 23       	and	r24, r24
 2e0:	e9 f3       	breq	.-6      	; 0x2dc <therm_read_temperature+0x16>
	//Reset, skip ROM and send command to read Scratchpad
	therm_reset();
 2e2:	9f df       	rcall	.-194    	; 0x222 <therm_reset>
	therm_write_byte(THERM_CMD_SKIPROM);
 2e4:	8c ec       	ldi	r24, 0xCC	; 204
 2e6:	e2 df       	rcall	.-60     	; 0x2ac <therm_write_byte>
	therm_write_byte(THERM_CMD_RSCRATCHPAD);
 2e8:	8e eb       	ldi	r24, 0xBE	; 190
 2ea:	e0 df       	rcall	.-64     	; 0x2ac <therm_write_byte>
	//Read Scratchpad (only 2 first bytes)
	temperature[0]=therm_read_byte();
 2ec:	ce df       	rcall	.-100    	; 0x28a <therm_read_byte>
 2ee:	c8 2f       	mov	r28, r24
	temperature[1]=therm_read_byte();
 2f0:	cc df       	rcall	.-104    	; 0x28a <therm_read_byte>
 2f2:	08 2f       	mov	r16, r24
	therm_reset();
 2f4:	96 df       	rcall	.-212    	; 0x222 <therm_reset>
	//Store temperature integer digits and decimal digits
	digit=temperature[0]>>4;
 2f6:	8c 2f       	mov	r24, r28
 2f8:	82 95       	swap	r24
 2fa:	8f 70       	andi	r24, 0x0F	; 15
	digit|=(temperature[1]&0x7)<<4;
	//Store decimal digits
	decimal=temperature[0]&0xf;
 2fc:	cf 70       	andi	r28, 0x0F	; 15
	decimal*=THERM_DECIMAL_STEPS_12BIT;
 2fe:	41 e7       	ldi	r20, 0x71	; 113
 300:	52 e0       	ldi	r21, 0x02	; 2
 302:	c4 9f       	mul	r28, r20
 304:	90 01       	movw	r18, r0
 306:	c5 9f       	mul	r28, r21
 308:	30 0d       	add	r19, r0
 30a:	11 24       	eor	r1, r1
	//Format temperature into a string [+XXX.XXXX C]
	sprintf(buffer, "%+d.%04u C", digit, decimal);
 30c:	3f 93       	push	r19
 30e:	2f 93       	push	r18
	temperature[0]=therm_read_byte();
	temperature[1]=therm_read_byte();
	therm_reset();
	//Store temperature integer digits and decimal digits
	digit=temperature[0]>>4;
	digit|=(temperature[1]&0x7)<<4;
 310:	07 70       	andi	r16, 0x07	; 7
 312:	90 e1       	ldi	r25, 0x10	; 16
 314:	09 9f       	mul	r16, r25
 316:	90 01       	movw	r18, r0
 318:	11 24       	eor	r1, r1
 31a:	48 2f       	mov	r20, r24
 31c:	42 2b       	or	r20, r18
	//Store decimal digits
	decimal=temperature[0]&0xf;
	decimal*=THERM_DECIMAL_STEPS_12BIT;
	//Format temperature into a string [+XXX.XXXX C]
	sprintf(buffer, "%+d.%04u C", digit, decimal);
 31e:	24 2f       	mov	r18, r20
 320:	33 27       	eor	r19, r19
 322:	27 fd       	sbrc	r18, 7
 324:	30 95       	com	r19
 326:	3f 93       	push	r19
 328:	4f 93       	push	r20
 32a:	20 e6       	ldi	r18, 0x60	; 96
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	3f 93       	push	r19
 330:	2f 93       	push	r18
 332:	1f 93       	push	r17
 334:	df 93       	push	r29
 336:	8f d1       	rcall	.+798    	; 0x656 <sprintf>
 338:	8d b7       	in	r24, 0x3d	; 61
 33a:	9e b7       	in	r25, 0x3e	; 62
 33c:	08 96       	adiw	r24, 0x08	; 8
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	f8 94       	cli
 342:	9e bf       	out	0x3e, r25	; 62
 344:	0f be       	out	0x3f, r0	; 63
 346:	8d bf       	out	0x3d, r24	; 61
}
 348:	df 91       	pop	r29
 34a:	cf 91       	pop	r28
 34c:	1f 91       	pop	r17
 34e:	0f 91       	pop	r16
 350:	08 95       	ret

00000352 <__subsf3>:
 352:	50 58       	subi	r21, 0x80	; 128

00000354 <__addsf3>:
 354:	bb 27       	eor	r27, r27
 356:	aa 27       	eor	r26, r26
 358:	0e d0       	rcall	.+28     	; 0x376 <__addsf3x>
 35a:	dc c0       	rjmp	.+440    	; 0x514 <__fp_round>
 35c:	cd d0       	rcall	.+410    	; 0x4f8 <__fp_pscA>
 35e:	30 f0       	brcs	.+12     	; 0x36c <__addsf3+0x18>
 360:	d2 d0       	rcall	.+420    	; 0x506 <__fp_pscB>
 362:	20 f0       	brcs	.+8      	; 0x36c <__addsf3+0x18>
 364:	31 f4       	brne	.+12     	; 0x372 <__addsf3+0x1e>
 366:	9f 3f       	cpi	r25, 0xFF	; 255
 368:	11 f4       	brne	.+4      	; 0x36e <__addsf3+0x1a>
 36a:	1e f4       	brtc	.+6      	; 0x372 <__addsf3+0x1e>
 36c:	c2 c0       	rjmp	.+388    	; 0x4f2 <__fp_nan>
 36e:	0e f4       	brtc	.+2      	; 0x372 <__addsf3+0x1e>
 370:	e0 95       	com	r30
 372:	e7 fb       	bst	r30, 7
 374:	b8 c0       	rjmp	.+368    	; 0x4e6 <__fp_inf>

00000376 <__addsf3x>:
 376:	e9 2f       	mov	r30, r25
 378:	de d0       	rcall	.+444    	; 0x536 <__fp_split3>
 37a:	80 f3       	brcs	.-32     	; 0x35c <__addsf3+0x8>
 37c:	ba 17       	cp	r27, r26
 37e:	62 07       	cpc	r22, r18
 380:	73 07       	cpc	r23, r19
 382:	84 07       	cpc	r24, r20
 384:	95 07       	cpc	r25, r21
 386:	18 f0       	brcs	.+6      	; 0x38e <__addsf3x+0x18>
 388:	71 f4       	brne	.+28     	; 0x3a6 <__addsf3x+0x30>
 38a:	9e f5       	brtc	.+102    	; 0x3f2 <__addsf3x+0x7c>
 38c:	f6 c0       	rjmp	.+492    	; 0x57a <__fp_zero>
 38e:	0e f4       	brtc	.+2      	; 0x392 <__addsf3x+0x1c>
 390:	e0 95       	com	r30
 392:	0b 2e       	mov	r0, r27
 394:	ba 2f       	mov	r27, r26
 396:	a0 2d       	mov	r26, r0
 398:	0b 01       	movw	r0, r22
 39a:	b9 01       	movw	r22, r18
 39c:	90 01       	movw	r18, r0
 39e:	0c 01       	movw	r0, r24
 3a0:	ca 01       	movw	r24, r20
 3a2:	a0 01       	movw	r20, r0
 3a4:	11 24       	eor	r1, r1
 3a6:	ff 27       	eor	r31, r31
 3a8:	59 1b       	sub	r21, r25
 3aa:	99 f0       	breq	.+38     	; 0x3d2 <__addsf3x+0x5c>
 3ac:	59 3f       	cpi	r21, 0xF9	; 249
 3ae:	50 f4       	brcc	.+20     	; 0x3c4 <__addsf3x+0x4e>
 3b0:	50 3e       	cpi	r21, 0xE0	; 224
 3b2:	68 f1       	brcs	.+90     	; 0x40e <__addsf3x+0x98>
 3b4:	1a 16       	cp	r1, r26
 3b6:	f0 40       	sbci	r31, 0x00	; 0
 3b8:	a2 2f       	mov	r26, r18
 3ba:	23 2f       	mov	r18, r19
 3bc:	34 2f       	mov	r19, r20
 3be:	44 27       	eor	r20, r20
 3c0:	58 5f       	subi	r21, 0xF8	; 248
 3c2:	f3 cf       	rjmp	.-26     	; 0x3aa <__addsf3x+0x34>
 3c4:	46 95       	lsr	r20
 3c6:	37 95       	ror	r19
 3c8:	27 95       	ror	r18
 3ca:	a7 95       	ror	r26
 3cc:	f0 40       	sbci	r31, 0x00	; 0
 3ce:	53 95       	inc	r21
 3d0:	c9 f7       	brne	.-14     	; 0x3c4 <__addsf3x+0x4e>
 3d2:	7e f4       	brtc	.+30     	; 0x3f2 <__addsf3x+0x7c>
 3d4:	1f 16       	cp	r1, r31
 3d6:	ba 0b       	sbc	r27, r26
 3d8:	62 0b       	sbc	r22, r18
 3da:	73 0b       	sbc	r23, r19
 3dc:	84 0b       	sbc	r24, r20
 3de:	ba f0       	brmi	.+46     	; 0x40e <__addsf3x+0x98>
 3e0:	91 50       	subi	r25, 0x01	; 1
 3e2:	a1 f0       	breq	.+40     	; 0x40c <__addsf3x+0x96>
 3e4:	ff 0f       	add	r31, r31
 3e6:	bb 1f       	adc	r27, r27
 3e8:	66 1f       	adc	r22, r22
 3ea:	77 1f       	adc	r23, r23
 3ec:	88 1f       	adc	r24, r24
 3ee:	c2 f7       	brpl	.-16     	; 0x3e0 <__addsf3x+0x6a>
 3f0:	0e c0       	rjmp	.+28     	; 0x40e <__addsf3x+0x98>
 3f2:	ba 0f       	add	r27, r26
 3f4:	62 1f       	adc	r22, r18
 3f6:	73 1f       	adc	r23, r19
 3f8:	84 1f       	adc	r24, r20
 3fa:	48 f4       	brcc	.+18     	; 0x40e <__addsf3x+0x98>
 3fc:	87 95       	ror	r24
 3fe:	77 95       	ror	r23
 400:	67 95       	ror	r22
 402:	b7 95       	ror	r27
 404:	f7 95       	ror	r31
 406:	9e 3f       	cpi	r25, 0xFE	; 254
 408:	08 f0       	brcs	.+2      	; 0x40c <__addsf3x+0x96>
 40a:	b3 cf       	rjmp	.-154    	; 0x372 <__addsf3+0x1e>
 40c:	93 95       	inc	r25
 40e:	88 0f       	add	r24, r24
 410:	08 f0       	brcs	.+2      	; 0x414 <__addsf3x+0x9e>
 412:	99 27       	eor	r25, r25
 414:	ee 0f       	add	r30, r30
 416:	97 95       	ror	r25
 418:	87 95       	ror	r24
 41a:	08 95       	ret

0000041c <__cmpsf2>:
 41c:	40 d0       	rcall	.+128    	; 0x49e <__fp_cmp>
 41e:	08 f4       	brcc	.+2      	; 0x422 <__cmpsf2+0x6>
 420:	81 e0       	ldi	r24, 0x01	; 1
 422:	08 95       	ret

00000424 <__floatunsisf>:
 424:	e8 94       	clt
 426:	09 c0       	rjmp	.+18     	; 0x43a <__floatsisf+0x12>

00000428 <__floatsisf>:
 428:	97 fb       	bst	r25, 7
 42a:	3e f4       	brtc	.+14     	; 0x43a <__floatsisf+0x12>
 42c:	90 95       	com	r25
 42e:	80 95       	com	r24
 430:	70 95       	com	r23
 432:	61 95       	neg	r22
 434:	7f 4f       	sbci	r23, 0xFF	; 255
 436:	8f 4f       	sbci	r24, 0xFF	; 255
 438:	9f 4f       	sbci	r25, 0xFF	; 255
 43a:	99 23       	and	r25, r25
 43c:	a9 f0       	breq	.+42     	; 0x468 <__stack+0x9>
 43e:	f9 2f       	mov	r31, r25
 440:	96 e9       	ldi	r25, 0x96	; 150
 442:	bb 27       	eor	r27, r27
 444:	93 95       	inc	r25
 446:	f6 95       	lsr	r31
 448:	87 95       	ror	r24
 44a:	77 95       	ror	r23
 44c:	67 95       	ror	r22
 44e:	b7 95       	ror	r27
 450:	f1 11       	cpse	r31, r1
 452:	f8 cf       	rjmp	.-16     	; 0x444 <__floatsisf+0x1c>
 454:	fa f4       	brpl	.+62     	; 0x494 <__stack+0x35>
 456:	bb 0f       	add	r27, r27
 458:	11 f4       	brne	.+4      	; 0x45e <__floatsisf+0x36>
 45a:	60 ff       	sbrs	r22, 0
 45c:	1b c0       	rjmp	.+54     	; 0x494 <__stack+0x35>
 45e:	6f 5f       	subi	r22, 0xFF	; 255
 460:	7f 4f       	sbci	r23, 0xFF	; 255
 462:	8f 4f       	sbci	r24, 0xFF	; 255
 464:	9f 4f       	sbci	r25, 0xFF	; 255
 466:	16 c0       	rjmp	.+44     	; 0x494 <__stack+0x35>
 468:	88 23       	and	r24, r24
 46a:	11 f0       	breq	.+4      	; 0x470 <__stack+0x11>
 46c:	96 e9       	ldi	r25, 0x96	; 150
 46e:	11 c0       	rjmp	.+34     	; 0x492 <__stack+0x33>
 470:	77 23       	and	r23, r23
 472:	21 f0       	breq	.+8      	; 0x47c <__stack+0x1d>
 474:	9e e8       	ldi	r25, 0x8E	; 142
 476:	87 2f       	mov	r24, r23
 478:	76 2f       	mov	r23, r22
 47a:	05 c0       	rjmp	.+10     	; 0x486 <__stack+0x27>
 47c:	66 23       	and	r22, r22
 47e:	71 f0       	breq	.+28     	; 0x49c <__stack+0x3d>
 480:	96 e8       	ldi	r25, 0x86	; 134
 482:	86 2f       	mov	r24, r22
 484:	70 e0       	ldi	r23, 0x00	; 0
 486:	60 e0       	ldi	r22, 0x00	; 0
 488:	2a f0       	brmi	.+10     	; 0x494 <__stack+0x35>
 48a:	9a 95       	dec	r25
 48c:	66 0f       	add	r22, r22
 48e:	77 1f       	adc	r23, r23
 490:	88 1f       	adc	r24, r24
 492:	da f7       	brpl	.-10     	; 0x48a <__stack+0x2b>
 494:	88 0f       	add	r24, r24
 496:	96 95       	lsr	r25
 498:	87 95       	ror	r24
 49a:	97 f9       	bld	r25, 7
 49c:	08 95       	ret

0000049e <__fp_cmp>:
 49e:	99 0f       	add	r25, r25
 4a0:	00 08       	sbc	r0, r0
 4a2:	55 0f       	add	r21, r21
 4a4:	aa 0b       	sbc	r26, r26
 4a6:	e0 e8       	ldi	r30, 0x80	; 128
 4a8:	fe ef       	ldi	r31, 0xFE	; 254
 4aa:	16 16       	cp	r1, r22
 4ac:	17 06       	cpc	r1, r23
 4ae:	e8 07       	cpc	r30, r24
 4b0:	f9 07       	cpc	r31, r25
 4b2:	c0 f0       	brcs	.+48     	; 0x4e4 <__fp_cmp+0x46>
 4b4:	12 16       	cp	r1, r18
 4b6:	13 06       	cpc	r1, r19
 4b8:	e4 07       	cpc	r30, r20
 4ba:	f5 07       	cpc	r31, r21
 4bc:	98 f0       	brcs	.+38     	; 0x4e4 <__fp_cmp+0x46>
 4be:	62 1b       	sub	r22, r18
 4c0:	73 0b       	sbc	r23, r19
 4c2:	84 0b       	sbc	r24, r20
 4c4:	95 0b       	sbc	r25, r21
 4c6:	39 f4       	brne	.+14     	; 0x4d6 <__fp_cmp+0x38>
 4c8:	0a 26       	eor	r0, r26
 4ca:	61 f0       	breq	.+24     	; 0x4e4 <__fp_cmp+0x46>
 4cc:	23 2b       	or	r18, r19
 4ce:	24 2b       	or	r18, r20
 4d0:	25 2b       	or	r18, r21
 4d2:	21 f4       	brne	.+8      	; 0x4dc <__fp_cmp+0x3e>
 4d4:	08 95       	ret
 4d6:	0a 26       	eor	r0, r26
 4d8:	09 f4       	brne	.+2      	; 0x4dc <__fp_cmp+0x3e>
 4da:	a1 40       	sbci	r26, 0x01	; 1
 4dc:	a6 95       	lsr	r26
 4de:	8f ef       	ldi	r24, 0xFF	; 255
 4e0:	81 1d       	adc	r24, r1
 4e2:	81 1d       	adc	r24, r1
 4e4:	08 95       	ret

000004e6 <__fp_inf>:
 4e6:	97 f9       	bld	r25, 7
 4e8:	9f 67       	ori	r25, 0x7F	; 127
 4ea:	80 e8       	ldi	r24, 0x80	; 128
 4ec:	70 e0       	ldi	r23, 0x00	; 0
 4ee:	60 e0       	ldi	r22, 0x00	; 0
 4f0:	08 95       	ret

000004f2 <__fp_nan>:
 4f2:	9f ef       	ldi	r25, 0xFF	; 255
 4f4:	80 ec       	ldi	r24, 0xC0	; 192
 4f6:	08 95       	ret

000004f8 <__fp_pscA>:
 4f8:	00 24       	eor	r0, r0
 4fa:	0a 94       	dec	r0
 4fc:	16 16       	cp	r1, r22
 4fe:	17 06       	cpc	r1, r23
 500:	18 06       	cpc	r1, r24
 502:	09 06       	cpc	r0, r25
 504:	08 95       	ret

00000506 <__fp_pscB>:
 506:	00 24       	eor	r0, r0
 508:	0a 94       	dec	r0
 50a:	12 16       	cp	r1, r18
 50c:	13 06       	cpc	r1, r19
 50e:	14 06       	cpc	r1, r20
 510:	05 06       	cpc	r0, r21
 512:	08 95       	ret

00000514 <__fp_round>:
 514:	09 2e       	mov	r0, r25
 516:	03 94       	inc	r0
 518:	00 0c       	add	r0, r0
 51a:	11 f4       	brne	.+4      	; 0x520 <__fp_round+0xc>
 51c:	88 23       	and	r24, r24
 51e:	52 f0       	brmi	.+20     	; 0x534 <__fp_round+0x20>
 520:	bb 0f       	add	r27, r27
 522:	40 f4       	brcc	.+16     	; 0x534 <__fp_round+0x20>
 524:	bf 2b       	or	r27, r31
 526:	11 f4       	brne	.+4      	; 0x52c <__fp_round+0x18>
 528:	60 ff       	sbrs	r22, 0
 52a:	04 c0       	rjmp	.+8      	; 0x534 <__fp_round+0x20>
 52c:	6f 5f       	subi	r22, 0xFF	; 255
 52e:	7f 4f       	sbci	r23, 0xFF	; 255
 530:	8f 4f       	sbci	r24, 0xFF	; 255
 532:	9f 4f       	sbci	r25, 0xFF	; 255
 534:	08 95       	ret

00000536 <__fp_split3>:
 536:	57 fd       	sbrc	r21, 7
 538:	90 58       	subi	r25, 0x80	; 128
 53a:	44 0f       	add	r20, r20
 53c:	55 1f       	adc	r21, r21
 53e:	59 f0       	breq	.+22     	; 0x556 <__fp_splitA+0x10>
 540:	5f 3f       	cpi	r21, 0xFF	; 255
 542:	71 f0       	breq	.+28     	; 0x560 <__fp_splitA+0x1a>
 544:	47 95       	ror	r20

00000546 <__fp_splitA>:
 546:	88 0f       	add	r24, r24
 548:	97 fb       	bst	r25, 7
 54a:	99 1f       	adc	r25, r25
 54c:	61 f0       	breq	.+24     	; 0x566 <__fp_splitA+0x20>
 54e:	9f 3f       	cpi	r25, 0xFF	; 255
 550:	79 f0       	breq	.+30     	; 0x570 <__fp_splitA+0x2a>
 552:	87 95       	ror	r24
 554:	08 95       	ret
 556:	12 16       	cp	r1, r18
 558:	13 06       	cpc	r1, r19
 55a:	14 06       	cpc	r1, r20
 55c:	55 1f       	adc	r21, r21
 55e:	f2 cf       	rjmp	.-28     	; 0x544 <__fp_split3+0xe>
 560:	46 95       	lsr	r20
 562:	f1 df       	rcall	.-30     	; 0x546 <__fp_splitA>
 564:	08 c0       	rjmp	.+16     	; 0x576 <__fp_splitA+0x30>
 566:	16 16       	cp	r1, r22
 568:	17 06       	cpc	r1, r23
 56a:	18 06       	cpc	r1, r24
 56c:	99 1f       	adc	r25, r25
 56e:	f1 cf       	rjmp	.-30     	; 0x552 <__fp_splitA+0xc>
 570:	86 95       	lsr	r24
 572:	71 05       	cpc	r23, r1
 574:	61 05       	cpc	r22, r1
 576:	08 94       	sec
 578:	08 95       	ret

0000057a <__fp_zero>:
 57a:	e8 94       	clt

0000057c <__fp_szero>:
 57c:	bb 27       	eor	r27, r27
 57e:	66 27       	eor	r22, r22
 580:	77 27       	eor	r23, r23
 582:	cb 01       	movw	r24, r22
 584:	97 f9       	bld	r25, 7
 586:	08 95       	ret

00000588 <__gesf2>:
 588:	8a df       	rcall	.-236    	; 0x49e <__fp_cmp>
 58a:	08 f4       	brcc	.+2      	; 0x58e <__gesf2+0x6>
 58c:	8f ef       	ldi	r24, 0xFF	; 255
 58e:	08 95       	ret

00000590 <__mulsf3>:
 590:	0b d0       	rcall	.+22     	; 0x5a8 <__mulsf3x>
 592:	c0 cf       	rjmp	.-128    	; 0x514 <__fp_round>
 594:	b1 df       	rcall	.-158    	; 0x4f8 <__fp_pscA>
 596:	28 f0       	brcs	.+10     	; 0x5a2 <__mulsf3+0x12>
 598:	b6 df       	rcall	.-148    	; 0x506 <__fp_pscB>
 59a:	18 f0       	brcs	.+6      	; 0x5a2 <__mulsf3+0x12>
 59c:	95 23       	and	r25, r21
 59e:	09 f0       	breq	.+2      	; 0x5a2 <__mulsf3+0x12>
 5a0:	a2 cf       	rjmp	.-188    	; 0x4e6 <__fp_inf>
 5a2:	a7 cf       	rjmp	.-178    	; 0x4f2 <__fp_nan>
 5a4:	11 24       	eor	r1, r1
 5a6:	ea cf       	rjmp	.-44     	; 0x57c <__fp_szero>

000005a8 <__mulsf3x>:
 5a8:	c6 df       	rcall	.-116    	; 0x536 <__fp_split3>
 5aa:	a0 f3       	brcs	.-24     	; 0x594 <__mulsf3+0x4>

000005ac <__mulsf3_pse>:
 5ac:	95 9f       	mul	r25, r21
 5ae:	d1 f3       	breq	.-12     	; 0x5a4 <__mulsf3+0x14>
 5b0:	95 0f       	add	r25, r21
 5b2:	50 e0       	ldi	r21, 0x00	; 0
 5b4:	55 1f       	adc	r21, r21
 5b6:	62 9f       	mul	r22, r18
 5b8:	f0 01       	movw	r30, r0
 5ba:	72 9f       	mul	r23, r18
 5bc:	bb 27       	eor	r27, r27
 5be:	f0 0d       	add	r31, r0
 5c0:	b1 1d       	adc	r27, r1
 5c2:	63 9f       	mul	r22, r19
 5c4:	aa 27       	eor	r26, r26
 5c6:	f0 0d       	add	r31, r0
 5c8:	b1 1d       	adc	r27, r1
 5ca:	aa 1f       	adc	r26, r26
 5cc:	64 9f       	mul	r22, r20
 5ce:	66 27       	eor	r22, r22
 5d0:	b0 0d       	add	r27, r0
 5d2:	a1 1d       	adc	r26, r1
 5d4:	66 1f       	adc	r22, r22
 5d6:	82 9f       	mul	r24, r18
 5d8:	22 27       	eor	r18, r18
 5da:	b0 0d       	add	r27, r0
 5dc:	a1 1d       	adc	r26, r1
 5de:	62 1f       	adc	r22, r18
 5e0:	73 9f       	mul	r23, r19
 5e2:	b0 0d       	add	r27, r0
 5e4:	a1 1d       	adc	r26, r1
 5e6:	62 1f       	adc	r22, r18
 5e8:	83 9f       	mul	r24, r19
 5ea:	a0 0d       	add	r26, r0
 5ec:	61 1d       	adc	r22, r1
 5ee:	22 1f       	adc	r18, r18
 5f0:	74 9f       	mul	r23, r20
 5f2:	33 27       	eor	r19, r19
 5f4:	a0 0d       	add	r26, r0
 5f6:	61 1d       	adc	r22, r1
 5f8:	23 1f       	adc	r18, r19
 5fa:	84 9f       	mul	r24, r20
 5fc:	60 0d       	add	r22, r0
 5fe:	21 1d       	adc	r18, r1
 600:	82 2f       	mov	r24, r18
 602:	76 2f       	mov	r23, r22
 604:	6a 2f       	mov	r22, r26
 606:	11 24       	eor	r1, r1
 608:	9f 57       	subi	r25, 0x7F	; 127
 60a:	50 40       	sbci	r21, 0x00	; 0
 60c:	8a f0       	brmi	.+34     	; 0x630 <__mulsf3_pse+0x84>
 60e:	e1 f0       	breq	.+56     	; 0x648 <__mulsf3_pse+0x9c>
 610:	88 23       	and	r24, r24
 612:	4a f0       	brmi	.+18     	; 0x626 <__mulsf3_pse+0x7a>
 614:	ee 0f       	add	r30, r30
 616:	ff 1f       	adc	r31, r31
 618:	bb 1f       	adc	r27, r27
 61a:	66 1f       	adc	r22, r22
 61c:	77 1f       	adc	r23, r23
 61e:	88 1f       	adc	r24, r24
 620:	91 50       	subi	r25, 0x01	; 1
 622:	50 40       	sbci	r21, 0x00	; 0
 624:	a9 f7       	brne	.-22     	; 0x610 <__mulsf3_pse+0x64>
 626:	9e 3f       	cpi	r25, 0xFE	; 254
 628:	51 05       	cpc	r21, r1
 62a:	70 f0       	brcs	.+28     	; 0x648 <__mulsf3_pse+0x9c>
 62c:	5c cf       	rjmp	.-328    	; 0x4e6 <__fp_inf>
 62e:	a6 cf       	rjmp	.-180    	; 0x57c <__fp_szero>
 630:	5f 3f       	cpi	r21, 0xFF	; 255
 632:	ec f3       	brlt	.-6      	; 0x62e <__mulsf3_pse+0x82>
 634:	98 3e       	cpi	r25, 0xE8	; 232
 636:	dc f3       	brlt	.-10     	; 0x62e <__mulsf3_pse+0x82>
 638:	86 95       	lsr	r24
 63a:	77 95       	ror	r23
 63c:	67 95       	ror	r22
 63e:	b7 95       	ror	r27
 640:	f7 95       	ror	r31
 642:	e7 95       	ror	r30
 644:	9f 5f       	subi	r25, 0xFF	; 255
 646:	c1 f7       	brne	.-16     	; 0x638 <__mulsf3_pse+0x8c>
 648:	fe 2b       	or	r31, r30
 64a:	88 0f       	add	r24, r24
 64c:	91 1d       	adc	r25, r1
 64e:	96 95       	lsr	r25
 650:	87 95       	ror	r24
 652:	97 f9       	bld	r25, 7
 654:	08 95       	ret

00000656 <sprintf>:
 656:	ae e0       	ldi	r26, 0x0E	; 14
 658:	b0 e0       	ldi	r27, 0x00	; 0
 65a:	e0 e3       	ldi	r30, 0x30	; 48
 65c:	f3 e0       	ldi	r31, 0x03	; 3
 65e:	95 c2       	rjmp	.+1322   	; 0xb8a <__prologue_saves__+0x1c>
 660:	0d 89       	ldd	r16, Y+21	; 0x15
 662:	1e 89       	ldd	r17, Y+22	; 0x16
 664:	86 e0       	ldi	r24, 0x06	; 6
 666:	8c 83       	std	Y+4, r24	; 0x04
 668:	1a 83       	std	Y+2, r17	; 0x02
 66a:	09 83       	std	Y+1, r16	; 0x01
 66c:	8f ef       	ldi	r24, 0xFF	; 255
 66e:	9f e7       	ldi	r25, 0x7F	; 127
 670:	9e 83       	std	Y+6, r25	; 0x06
 672:	8d 83       	std	Y+5, r24	; 0x05
 674:	ce 01       	movw	r24, r28
 676:	49 96       	adiw	r24, 0x19	; 25
 678:	ac 01       	movw	r20, r24
 67a:	6f 89       	ldd	r22, Y+23	; 0x17
 67c:	78 8d       	ldd	r23, Y+24	; 0x18
 67e:	ce 01       	movw	r24, r28
 680:	01 96       	adiw	r24, 0x01	; 1
 682:	08 d0       	rcall	.+16     	; 0x694 <vfprintf>
 684:	ef 81       	ldd	r30, Y+7	; 0x07
 686:	f8 85       	ldd	r31, Y+8	; 0x08
 688:	e0 0f       	add	r30, r16
 68a:	f1 1f       	adc	r31, r17
 68c:	10 82       	st	Z, r1
 68e:	2e 96       	adiw	r28, 0x0e	; 14
 690:	e4 e0       	ldi	r30, 0x04	; 4
 692:	97 c2       	rjmp	.+1326   	; 0xbc2 <__epilogue_restores__+0x1c>

00000694 <vfprintf>:
 694:	ac e0       	ldi	r26, 0x0C	; 12
 696:	b0 e0       	ldi	r27, 0x00	; 0
 698:	ef e4       	ldi	r30, 0x4F	; 79
 69a:	f3 e0       	ldi	r31, 0x03	; 3
 69c:	68 c2       	rjmp	.+1232   	; 0xb6e <__prologue_saves__>
 69e:	7c 01       	movw	r14, r24
 6a0:	6b 01       	movw	r12, r22
 6a2:	8a 01       	movw	r16, r20
 6a4:	fc 01       	movw	r30, r24
 6a6:	17 82       	std	Z+7, r1	; 0x07
 6a8:	16 82       	std	Z+6, r1	; 0x06
 6aa:	83 81       	ldd	r24, Z+3	; 0x03
 6ac:	81 ff       	sbrs	r24, 1
 6ae:	b9 c1       	rjmp	.+882    	; 0xa22 <vfprintf+0x38e>
 6b0:	88 24       	eor	r8, r8
 6b2:	83 94       	inc	r8
 6b4:	91 2c       	mov	r9, r1
 6b6:	8c 0e       	add	r8, r28
 6b8:	9d 1e       	adc	r9, r29
 6ba:	f7 01       	movw	r30, r14
 6bc:	93 81       	ldd	r25, Z+3	; 0x03
 6be:	f6 01       	movw	r30, r12
 6c0:	93 fd       	sbrc	r25, 3
 6c2:	85 91       	lpm	r24, Z+
 6c4:	93 ff       	sbrs	r25, 3
 6c6:	81 91       	ld	r24, Z+
 6c8:	6f 01       	movw	r12, r30
 6ca:	88 23       	and	r24, r24
 6cc:	09 f4       	brne	.+2      	; 0x6d0 <vfprintf+0x3c>
 6ce:	a5 c1       	rjmp	.+842    	; 0xa1a <vfprintf+0x386>
 6d0:	85 32       	cpi	r24, 0x25	; 37
 6d2:	39 f4       	brne	.+14     	; 0x6e2 <vfprintf+0x4e>
 6d4:	93 fd       	sbrc	r25, 3
 6d6:	85 91       	lpm	r24, Z+
 6d8:	93 ff       	sbrs	r25, 3
 6da:	81 91       	ld	r24, Z+
 6dc:	6f 01       	movw	r12, r30
 6de:	85 32       	cpi	r24, 0x25	; 37
 6e0:	21 f4       	brne	.+8      	; 0x6ea <vfprintf+0x56>
 6e2:	b7 01       	movw	r22, r14
 6e4:	90 e0       	ldi	r25, 0x00	; 0
 6e6:	b9 d1       	rcall	.+882    	; 0xa5a <fputc>
 6e8:	e8 cf       	rjmp	.-48     	; 0x6ba <vfprintf+0x26>
 6ea:	51 2c       	mov	r5, r1
 6ec:	31 2c       	mov	r3, r1
 6ee:	20 e0       	ldi	r18, 0x00	; 0
 6f0:	20 32       	cpi	r18, 0x20	; 32
 6f2:	a8 f4       	brcc	.+42     	; 0x71e <vfprintf+0x8a>
 6f4:	8b 32       	cpi	r24, 0x2B	; 43
 6f6:	61 f0       	breq	.+24     	; 0x710 <vfprintf+0x7c>
 6f8:	28 f4       	brcc	.+10     	; 0x704 <vfprintf+0x70>
 6fa:	80 32       	cpi	r24, 0x20	; 32
 6fc:	51 f0       	breq	.+20     	; 0x712 <vfprintf+0x7e>
 6fe:	83 32       	cpi	r24, 0x23	; 35
 700:	71 f4       	brne	.+28     	; 0x71e <vfprintf+0x8a>
 702:	0b c0       	rjmp	.+22     	; 0x71a <vfprintf+0x86>
 704:	8d 32       	cpi	r24, 0x2D	; 45
 706:	39 f0       	breq	.+14     	; 0x716 <vfprintf+0x82>
 708:	80 33       	cpi	r24, 0x30	; 48
 70a:	49 f4       	brne	.+18     	; 0x71e <vfprintf+0x8a>
 70c:	21 60       	ori	r18, 0x01	; 1
 70e:	28 c0       	rjmp	.+80     	; 0x760 <vfprintf+0xcc>
 710:	22 60       	ori	r18, 0x02	; 2
 712:	24 60       	ori	r18, 0x04	; 4
 714:	25 c0       	rjmp	.+74     	; 0x760 <vfprintf+0xcc>
 716:	28 60       	ori	r18, 0x08	; 8
 718:	23 c0       	rjmp	.+70     	; 0x760 <vfprintf+0xcc>
 71a:	20 61       	ori	r18, 0x10	; 16
 71c:	21 c0       	rjmp	.+66     	; 0x760 <vfprintf+0xcc>
 71e:	27 fd       	sbrc	r18, 7
 720:	27 c0       	rjmp	.+78     	; 0x770 <vfprintf+0xdc>
 722:	38 2f       	mov	r19, r24
 724:	30 53       	subi	r19, 0x30	; 48
 726:	3a 30       	cpi	r19, 0x0A	; 10
 728:	78 f4       	brcc	.+30     	; 0x748 <vfprintf+0xb4>
 72a:	26 ff       	sbrs	r18, 6
 72c:	06 c0       	rjmp	.+12     	; 0x73a <vfprintf+0xa6>
 72e:	fa e0       	ldi	r31, 0x0A	; 10
 730:	5f 9e       	mul	r5, r31
 732:	30 0d       	add	r19, r0
 734:	11 24       	eor	r1, r1
 736:	53 2e       	mov	r5, r19
 738:	13 c0       	rjmp	.+38     	; 0x760 <vfprintf+0xcc>
 73a:	8a e0       	ldi	r24, 0x0A	; 10
 73c:	38 9e       	mul	r3, r24
 73e:	30 0d       	add	r19, r0
 740:	11 24       	eor	r1, r1
 742:	33 2e       	mov	r3, r19
 744:	20 62       	ori	r18, 0x20	; 32
 746:	0c c0       	rjmp	.+24     	; 0x760 <vfprintf+0xcc>
 748:	8e 32       	cpi	r24, 0x2E	; 46
 74a:	21 f4       	brne	.+8      	; 0x754 <vfprintf+0xc0>
 74c:	26 fd       	sbrc	r18, 6
 74e:	65 c1       	rjmp	.+714    	; 0xa1a <vfprintf+0x386>
 750:	20 64       	ori	r18, 0x40	; 64
 752:	06 c0       	rjmp	.+12     	; 0x760 <vfprintf+0xcc>
 754:	8c 36       	cpi	r24, 0x6C	; 108
 756:	11 f4       	brne	.+4      	; 0x75c <vfprintf+0xc8>
 758:	20 68       	ori	r18, 0x80	; 128
 75a:	02 c0       	rjmp	.+4      	; 0x760 <vfprintf+0xcc>
 75c:	88 36       	cpi	r24, 0x68	; 104
 75e:	41 f4       	brne	.+16     	; 0x770 <vfprintf+0xdc>
 760:	f6 01       	movw	r30, r12
 762:	93 fd       	sbrc	r25, 3
 764:	85 91       	lpm	r24, Z+
 766:	93 ff       	sbrs	r25, 3
 768:	81 91       	ld	r24, Z+
 76a:	6f 01       	movw	r12, r30
 76c:	81 11       	cpse	r24, r1
 76e:	c0 cf       	rjmp	.-128    	; 0x6f0 <vfprintf+0x5c>
 770:	98 2f       	mov	r25, r24
 772:	95 54       	subi	r25, 0x45	; 69
 774:	93 30       	cpi	r25, 0x03	; 3
 776:	18 f0       	brcs	.+6      	; 0x77e <vfprintf+0xea>
 778:	90 52       	subi	r25, 0x20	; 32
 77a:	93 30       	cpi	r25, 0x03	; 3
 77c:	28 f4       	brcc	.+10     	; 0x788 <vfprintf+0xf4>
 77e:	0c 5f       	subi	r16, 0xFC	; 252
 780:	1f 4f       	sbci	r17, 0xFF	; 255
 782:	ff e3       	ldi	r31, 0x3F	; 63
 784:	f9 83       	std	Y+1, r31	; 0x01
 786:	0d c0       	rjmp	.+26     	; 0x7a2 <vfprintf+0x10e>
 788:	83 36       	cpi	r24, 0x63	; 99
 78a:	31 f0       	breq	.+12     	; 0x798 <vfprintf+0x104>
 78c:	83 37       	cpi	r24, 0x73	; 115
 78e:	71 f0       	breq	.+28     	; 0x7ac <vfprintf+0x118>
 790:	83 35       	cpi	r24, 0x53	; 83
 792:	09 f0       	breq	.+2      	; 0x796 <vfprintf+0x102>
 794:	5a c0       	rjmp	.+180    	; 0x84a <vfprintf+0x1b6>
 796:	22 c0       	rjmp	.+68     	; 0x7dc <vfprintf+0x148>
 798:	f8 01       	movw	r30, r16
 79a:	80 81       	ld	r24, Z
 79c:	89 83       	std	Y+1, r24	; 0x01
 79e:	0e 5f       	subi	r16, 0xFE	; 254
 7a0:	1f 4f       	sbci	r17, 0xFF	; 255
 7a2:	44 24       	eor	r4, r4
 7a4:	43 94       	inc	r4
 7a6:	51 2c       	mov	r5, r1
 7a8:	54 01       	movw	r10, r8
 7aa:	14 c0       	rjmp	.+40     	; 0x7d4 <vfprintf+0x140>
 7ac:	38 01       	movw	r6, r16
 7ae:	f2 e0       	ldi	r31, 0x02	; 2
 7b0:	6f 0e       	add	r6, r31
 7b2:	71 1c       	adc	r7, r1
 7b4:	f8 01       	movw	r30, r16
 7b6:	a0 80       	ld	r10, Z
 7b8:	b1 80       	ldd	r11, Z+1	; 0x01
 7ba:	26 ff       	sbrs	r18, 6
 7bc:	03 c0       	rjmp	.+6      	; 0x7c4 <vfprintf+0x130>
 7be:	65 2d       	mov	r22, r5
 7c0:	70 e0       	ldi	r23, 0x00	; 0
 7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <vfprintf+0x134>
 7c4:	6f ef       	ldi	r22, 0xFF	; 255
 7c6:	7f ef       	ldi	r23, 0xFF	; 255
 7c8:	c5 01       	movw	r24, r10
 7ca:	2c 87       	std	Y+12, r18	; 0x0c
 7cc:	3b d1       	rcall	.+630    	; 0xa44 <strnlen>
 7ce:	2c 01       	movw	r4, r24
 7d0:	83 01       	movw	r16, r6
 7d2:	2c 85       	ldd	r18, Y+12	; 0x0c
 7d4:	6f e7       	ldi	r22, 0x7F	; 127
 7d6:	26 2e       	mov	r2, r22
 7d8:	22 22       	and	r2, r18
 7da:	17 c0       	rjmp	.+46     	; 0x80a <vfprintf+0x176>
 7dc:	38 01       	movw	r6, r16
 7de:	f2 e0       	ldi	r31, 0x02	; 2
 7e0:	6f 0e       	add	r6, r31
 7e2:	71 1c       	adc	r7, r1
 7e4:	f8 01       	movw	r30, r16
 7e6:	a0 80       	ld	r10, Z
 7e8:	b1 80       	ldd	r11, Z+1	; 0x01
 7ea:	26 ff       	sbrs	r18, 6
 7ec:	03 c0       	rjmp	.+6      	; 0x7f4 <vfprintf+0x160>
 7ee:	65 2d       	mov	r22, r5
 7f0:	70 e0       	ldi	r23, 0x00	; 0
 7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <vfprintf+0x164>
 7f4:	6f ef       	ldi	r22, 0xFF	; 255
 7f6:	7f ef       	ldi	r23, 0xFF	; 255
 7f8:	c5 01       	movw	r24, r10
 7fa:	2c 87       	std	Y+12, r18	; 0x0c
 7fc:	18 d1       	rcall	.+560    	; 0xa2e <strnlen_P>
 7fe:	2c 01       	movw	r4, r24
 800:	2c 85       	ldd	r18, Y+12	; 0x0c
 802:	50 e8       	ldi	r21, 0x80	; 128
 804:	25 2e       	mov	r2, r21
 806:	22 2a       	or	r2, r18
 808:	83 01       	movw	r16, r6
 80a:	23 fc       	sbrc	r2, 3
 80c:	1a c0       	rjmp	.+52     	; 0x842 <vfprintf+0x1ae>
 80e:	05 c0       	rjmp	.+10     	; 0x81a <vfprintf+0x186>
 810:	b7 01       	movw	r22, r14
 812:	80 e2       	ldi	r24, 0x20	; 32
 814:	90 e0       	ldi	r25, 0x00	; 0
 816:	21 d1       	rcall	.+578    	; 0xa5a <fputc>
 818:	3a 94       	dec	r3
 81a:	83 2d       	mov	r24, r3
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	48 16       	cp	r4, r24
 820:	59 06       	cpc	r5, r25
 822:	b0 f3       	brcs	.-20     	; 0x810 <vfprintf+0x17c>
 824:	0e c0       	rjmp	.+28     	; 0x842 <vfprintf+0x1ae>
 826:	f5 01       	movw	r30, r10
 828:	27 fc       	sbrc	r2, 7
 82a:	85 91       	lpm	r24, Z+
 82c:	27 fe       	sbrs	r2, 7
 82e:	81 91       	ld	r24, Z+
 830:	5f 01       	movw	r10, r30
 832:	b7 01       	movw	r22, r14
 834:	90 e0       	ldi	r25, 0x00	; 0
 836:	11 d1       	rcall	.+546    	; 0xa5a <fputc>
 838:	31 10       	cpse	r3, r1
 83a:	3a 94       	dec	r3
 83c:	f1 e0       	ldi	r31, 0x01	; 1
 83e:	4f 1a       	sub	r4, r31
 840:	51 08       	sbc	r5, r1
 842:	41 14       	cp	r4, r1
 844:	51 04       	cpc	r5, r1
 846:	79 f7       	brne	.-34     	; 0x826 <vfprintf+0x192>
 848:	e5 c0       	rjmp	.+458    	; 0xa14 <vfprintf+0x380>
 84a:	84 36       	cpi	r24, 0x64	; 100
 84c:	11 f0       	breq	.+4      	; 0x852 <vfprintf+0x1be>
 84e:	89 36       	cpi	r24, 0x69	; 105
 850:	39 f5       	brne	.+78     	; 0x8a0 <vfprintf+0x20c>
 852:	f8 01       	movw	r30, r16
 854:	27 ff       	sbrs	r18, 7
 856:	07 c0       	rjmp	.+14     	; 0x866 <vfprintf+0x1d2>
 858:	60 81       	ld	r22, Z
 85a:	71 81       	ldd	r23, Z+1	; 0x01
 85c:	82 81       	ldd	r24, Z+2	; 0x02
 85e:	93 81       	ldd	r25, Z+3	; 0x03
 860:	0c 5f       	subi	r16, 0xFC	; 252
 862:	1f 4f       	sbci	r17, 0xFF	; 255
 864:	08 c0       	rjmp	.+16     	; 0x876 <vfprintf+0x1e2>
 866:	60 81       	ld	r22, Z
 868:	71 81       	ldd	r23, Z+1	; 0x01
 86a:	88 27       	eor	r24, r24
 86c:	77 fd       	sbrc	r23, 7
 86e:	80 95       	com	r24
 870:	98 2f       	mov	r25, r24
 872:	0e 5f       	subi	r16, 0xFE	; 254
 874:	1f 4f       	sbci	r17, 0xFF	; 255
 876:	4f e6       	ldi	r20, 0x6F	; 111
 878:	b4 2e       	mov	r11, r20
 87a:	b2 22       	and	r11, r18
 87c:	97 ff       	sbrs	r25, 7
 87e:	09 c0       	rjmp	.+18     	; 0x892 <vfprintf+0x1fe>
 880:	90 95       	com	r25
 882:	80 95       	com	r24
 884:	70 95       	com	r23
 886:	61 95       	neg	r22
 888:	7f 4f       	sbci	r23, 0xFF	; 255
 88a:	8f 4f       	sbci	r24, 0xFF	; 255
 88c:	9f 4f       	sbci	r25, 0xFF	; 255
 88e:	f0 e8       	ldi	r31, 0x80	; 128
 890:	bf 2a       	or	r11, r31
 892:	2a e0       	ldi	r18, 0x0A	; 10
 894:	30 e0       	ldi	r19, 0x00	; 0
 896:	a4 01       	movw	r20, r8
 898:	0c d1       	rcall	.+536    	; 0xab2 <__ultoa_invert>
 89a:	a8 2e       	mov	r10, r24
 89c:	a8 18       	sub	r10, r8
 89e:	42 c0       	rjmp	.+132    	; 0x924 <vfprintf+0x290>
 8a0:	85 37       	cpi	r24, 0x75	; 117
 8a2:	31 f4       	brne	.+12     	; 0x8b0 <vfprintf+0x21c>
 8a4:	3f ee       	ldi	r19, 0xEF	; 239
 8a6:	b3 2e       	mov	r11, r19
 8a8:	b2 22       	and	r11, r18
 8aa:	2a e0       	ldi	r18, 0x0A	; 10
 8ac:	30 e0       	ldi	r19, 0x00	; 0
 8ae:	24 c0       	rjmp	.+72     	; 0x8f8 <vfprintf+0x264>
 8b0:	99 ef       	ldi	r25, 0xF9	; 249
 8b2:	b9 2e       	mov	r11, r25
 8b4:	b2 22       	and	r11, r18
 8b6:	8f 36       	cpi	r24, 0x6F	; 111
 8b8:	b9 f0       	breq	.+46     	; 0x8e8 <vfprintf+0x254>
 8ba:	20 f4       	brcc	.+8      	; 0x8c4 <vfprintf+0x230>
 8bc:	88 35       	cpi	r24, 0x58	; 88
 8be:	09 f0       	breq	.+2      	; 0x8c2 <vfprintf+0x22e>
 8c0:	ac c0       	rjmp	.+344    	; 0xa1a <vfprintf+0x386>
 8c2:	0d c0       	rjmp	.+26     	; 0x8de <vfprintf+0x24a>
 8c4:	80 37       	cpi	r24, 0x70	; 112
 8c6:	21 f0       	breq	.+8      	; 0x8d0 <vfprintf+0x23c>
 8c8:	88 37       	cpi	r24, 0x78	; 120
 8ca:	09 f0       	breq	.+2      	; 0x8ce <vfprintf+0x23a>
 8cc:	a6 c0       	rjmp	.+332    	; 0xa1a <vfprintf+0x386>
 8ce:	02 c0       	rjmp	.+4      	; 0x8d4 <vfprintf+0x240>
 8d0:	20 e1       	ldi	r18, 0x10	; 16
 8d2:	b2 2a       	or	r11, r18
 8d4:	b4 fe       	sbrs	r11, 4
 8d6:	0b c0       	rjmp	.+22     	; 0x8ee <vfprintf+0x25a>
 8d8:	84 e0       	ldi	r24, 0x04	; 4
 8da:	b8 2a       	or	r11, r24
 8dc:	08 c0       	rjmp	.+16     	; 0x8ee <vfprintf+0x25a>
 8de:	24 ff       	sbrs	r18, 4
 8e0:	09 c0       	rjmp	.+18     	; 0x8f4 <vfprintf+0x260>
 8e2:	e6 e0       	ldi	r30, 0x06	; 6
 8e4:	be 2a       	or	r11, r30
 8e6:	06 c0       	rjmp	.+12     	; 0x8f4 <vfprintf+0x260>
 8e8:	28 e0       	ldi	r18, 0x08	; 8
 8ea:	30 e0       	ldi	r19, 0x00	; 0
 8ec:	05 c0       	rjmp	.+10     	; 0x8f8 <vfprintf+0x264>
 8ee:	20 e1       	ldi	r18, 0x10	; 16
 8f0:	30 e0       	ldi	r19, 0x00	; 0
 8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <vfprintf+0x264>
 8f4:	20 e1       	ldi	r18, 0x10	; 16
 8f6:	32 e0       	ldi	r19, 0x02	; 2
 8f8:	f8 01       	movw	r30, r16
 8fa:	b7 fe       	sbrs	r11, 7
 8fc:	07 c0       	rjmp	.+14     	; 0x90c <vfprintf+0x278>
 8fe:	60 81       	ld	r22, Z
 900:	71 81       	ldd	r23, Z+1	; 0x01
 902:	82 81       	ldd	r24, Z+2	; 0x02
 904:	93 81       	ldd	r25, Z+3	; 0x03
 906:	0c 5f       	subi	r16, 0xFC	; 252
 908:	1f 4f       	sbci	r17, 0xFF	; 255
 90a:	06 c0       	rjmp	.+12     	; 0x918 <vfprintf+0x284>
 90c:	60 81       	ld	r22, Z
 90e:	71 81       	ldd	r23, Z+1	; 0x01
 910:	80 e0       	ldi	r24, 0x00	; 0
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	0e 5f       	subi	r16, 0xFE	; 254
 916:	1f 4f       	sbci	r17, 0xFF	; 255
 918:	a4 01       	movw	r20, r8
 91a:	cb d0       	rcall	.+406    	; 0xab2 <__ultoa_invert>
 91c:	a8 2e       	mov	r10, r24
 91e:	a8 18       	sub	r10, r8
 920:	ff e7       	ldi	r31, 0x7F	; 127
 922:	bf 22       	and	r11, r31
 924:	b6 fe       	sbrs	r11, 6
 926:	0b c0       	rjmp	.+22     	; 0x93e <vfprintf+0x2aa>
 928:	2b 2d       	mov	r18, r11
 92a:	2e 7f       	andi	r18, 0xFE	; 254
 92c:	a5 14       	cp	r10, r5
 92e:	50 f4       	brcc	.+20     	; 0x944 <vfprintf+0x2b0>
 930:	b4 fe       	sbrs	r11, 4
 932:	0a c0       	rjmp	.+20     	; 0x948 <vfprintf+0x2b4>
 934:	b2 fc       	sbrc	r11, 2
 936:	08 c0       	rjmp	.+16     	; 0x948 <vfprintf+0x2b4>
 938:	2b 2d       	mov	r18, r11
 93a:	2e 7e       	andi	r18, 0xEE	; 238
 93c:	05 c0       	rjmp	.+10     	; 0x948 <vfprintf+0x2b4>
 93e:	7a 2c       	mov	r7, r10
 940:	2b 2d       	mov	r18, r11
 942:	03 c0       	rjmp	.+6      	; 0x94a <vfprintf+0x2b6>
 944:	7a 2c       	mov	r7, r10
 946:	01 c0       	rjmp	.+2      	; 0x94a <vfprintf+0x2b6>
 948:	75 2c       	mov	r7, r5
 94a:	24 ff       	sbrs	r18, 4
 94c:	0d c0       	rjmp	.+26     	; 0x968 <vfprintf+0x2d4>
 94e:	fe 01       	movw	r30, r28
 950:	ea 0d       	add	r30, r10
 952:	f1 1d       	adc	r31, r1
 954:	80 81       	ld	r24, Z
 956:	80 33       	cpi	r24, 0x30	; 48
 958:	11 f4       	brne	.+4      	; 0x95e <vfprintf+0x2ca>
 95a:	29 7e       	andi	r18, 0xE9	; 233
 95c:	09 c0       	rjmp	.+18     	; 0x970 <vfprintf+0x2dc>
 95e:	22 ff       	sbrs	r18, 2
 960:	06 c0       	rjmp	.+12     	; 0x96e <vfprintf+0x2da>
 962:	73 94       	inc	r7
 964:	73 94       	inc	r7
 966:	04 c0       	rjmp	.+8      	; 0x970 <vfprintf+0x2dc>
 968:	82 2f       	mov	r24, r18
 96a:	86 78       	andi	r24, 0x86	; 134
 96c:	09 f0       	breq	.+2      	; 0x970 <vfprintf+0x2dc>
 96e:	73 94       	inc	r7
 970:	23 fd       	sbrc	r18, 3
 972:	13 c0       	rjmp	.+38     	; 0x99a <vfprintf+0x306>
 974:	20 ff       	sbrs	r18, 0
 976:	0e c0       	rjmp	.+28     	; 0x994 <vfprintf+0x300>
 978:	5a 2c       	mov	r5, r10
 97a:	73 14       	cp	r7, r3
 97c:	58 f4       	brcc	.+22     	; 0x994 <vfprintf+0x300>
 97e:	53 0c       	add	r5, r3
 980:	57 18       	sub	r5, r7
 982:	73 2c       	mov	r7, r3
 984:	07 c0       	rjmp	.+14     	; 0x994 <vfprintf+0x300>
 986:	b7 01       	movw	r22, r14
 988:	80 e2       	ldi	r24, 0x20	; 32
 98a:	90 e0       	ldi	r25, 0x00	; 0
 98c:	2c 87       	std	Y+12, r18	; 0x0c
 98e:	65 d0       	rcall	.+202    	; 0xa5a <fputc>
 990:	73 94       	inc	r7
 992:	2c 85       	ldd	r18, Y+12	; 0x0c
 994:	73 14       	cp	r7, r3
 996:	b8 f3       	brcs	.-18     	; 0x986 <vfprintf+0x2f2>
 998:	04 c0       	rjmp	.+8      	; 0x9a2 <vfprintf+0x30e>
 99a:	73 14       	cp	r7, r3
 99c:	10 f4       	brcc	.+4      	; 0x9a2 <vfprintf+0x30e>
 99e:	37 18       	sub	r3, r7
 9a0:	01 c0       	rjmp	.+2      	; 0x9a4 <vfprintf+0x310>
 9a2:	31 2c       	mov	r3, r1
 9a4:	24 ff       	sbrs	r18, 4
 9a6:	11 c0       	rjmp	.+34     	; 0x9ca <vfprintf+0x336>
 9a8:	b7 01       	movw	r22, r14
 9aa:	80 e3       	ldi	r24, 0x30	; 48
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	2c 87       	std	Y+12, r18	; 0x0c
 9b0:	54 d0       	rcall	.+168    	; 0xa5a <fputc>
 9b2:	2c 85       	ldd	r18, Y+12	; 0x0c
 9b4:	22 ff       	sbrs	r18, 2
 9b6:	1c c0       	rjmp	.+56     	; 0x9f0 <vfprintf+0x35c>
 9b8:	21 ff       	sbrs	r18, 1
 9ba:	03 c0       	rjmp	.+6      	; 0x9c2 <vfprintf+0x32e>
 9bc:	88 e5       	ldi	r24, 0x58	; 88
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <vfprintf+0x332>
 9c2:	88 e7       	ldi	r24, 0x78	; 120
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	b7 01       	movw	r22, r14
 9c8:	0c c0       	rjmp	.+24     	; 0x9e2 <vfprintf+0x34e>
 9ca:	82 2f       	mov	r24, r18
 9cc:	86 78       	andi	r24, 0x86	; 134
 9ce:	81 f0       	breq	.+32     	; 0x9f0 <vfprintf+0x35c>
 9d0:	21 fd       	sbrc	r18, 1
 9d2:	02 c0       	rjmp	.+4      	; 0x9d8 <vfprintf+0x344>
 9d4:	80 e2       	ldi	r24, 0x20	; 32
 9d6:	01 c0       	rjmp	.+2      	; 0x9da <vfprintf+0x346>
 9d8:	8b e2       	ldi	r24, 0x2B	; 43
 9da:	27 fd       	sbrc	r18, 7
 9dc:	8d e2       	ldi	r24, 0x2D	; 45
 9de:	b7 01       	movw	r22, r14
 9e0:	90 e0       	ldi	r25, 0x00	; 0
 9e2:	3b d0       	rcall	.+118    	; 0xa5a <fputc>
 9e4:	05 c0       	rjmp	.+10     	; 0x9f0 <vfprintf+0x35c>
 9e6:	b7 01       	movw	r22, r14
 9e8:	80 e3       	ldi	r24, 0x30	; 48
 9ea:	90 e0       	ldi	r25, 0x00	; 0
 9ec:	36 d0       	rcall	.+108    	; 0xa5a <fputc>
 9ee:	5a 94       	dec	r5
 9f0:	a5 14       	cp	r10, r5
 9f2:	c8 f3       	brcs	.-14     	; 0x9e6 <vfprintf+0x352>
 9f4:	aa 94       	dec	r10
 9f6:	f4 01       	movw	r30, r8
 9f8:	ea 0d       	add	r30, r10
 9fa:	f1 1d       	adc	r31, r1
 9fc:	b7 01       	movw	r22, r14
 9fe:	80 81       	ld	r24, Z
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	2b d0       	rcall	.+86     	; 0xa5a <fputc>
 a04:	a1 10       	cpse	r10, r1
 a06:	f6 cf       	rjmp	.-20     	; 0x9f4 <vfprintf+0x360>
 a08:	05 c0       	rjmp	.+10     	; 0xa14 <vfprintf+0x380>
 a0a:	b7 01       	movw	r22, r14
 a0c:	80 e2       	ldi	r24, 0x20	; 32
 a0e:	90 e0       	ldi	r25, 0x00	; 0
 a10:	24 d0       	rcall	.+72     	; 0xa5a <fputc>
 a12:	3a 94       	dec	r3
 a14:	31 10       	cpse	r3, r1
 a16:	f9 cf       	rjmp	.-14     	; 0xa0a <vfprintf+0x376>
 a18:	50 ce       	rjmp	.-864    	; 0x6ba <vfprintf+0x26>
 a1a:	f7 01       	movw	r30, r14
 a1c:	26 81       	ldd	r18, Z+6	; 0x06
 a1e:	37 81       	ldd	r19, Z+7	; 0x07
 a20:	02 c0       	rjmp	.+4      	; 0xa26 <vfprintf+0x392>
 a22:	2f ef       	ldi	r18, 0xFF	; 255
 a24:	3f ef       	ldi	r19, 0xFF	; 255
 a26:	c9 01       	movw	r24, r18
 a28:	2c 96       	adiw	r28, 0x0c	; 12
 a2a:	e2 e1       	ldi	r30, 0x12	; 18
 a2c:	bc c0       	rjmp	.+376    	; 0xba6 <__epilogue_restores__>

00000a2e <strnlen_P>:
 a2e:	fc 01       	movw	r30, r24
 a30:	05 90       	lpm	r0, Z+
 a32:	61 50       	subi	r22, 0x01	; 1
 a34:	70 40       	sbci	r23, 0x00	; 0
 a36:	01 10       	cpse	r0, r1
 a38:	d8 f7       	brcc	.-10     	; 0xa30 <strnlen_P+0x2>
 a3a:	80 95       	com	r24
 a3c:	90 95       	com	r25
 a3e:	8e 0f       	add	r24, r30
 a40:	9f 1f       	adc	r25, r31
 a42:	08 95       	ret

00000a44 <strnlen>:
 a44:	fc 01       	movw	r30, r24
 a46:	61 50       	subi	r22, 0x01	; 1
 a48:	70 40       	sbci	r23, 0x00	; 0
 a4a:	01 90       	ld	r0, Z+
 a4c:	01 10       	cpse	r0, r1
 a4e:	d8 f7       	brcc	.-10     	; 0xa46 <strnlen+0x2>
 a50:	80 95       	com	r24
 a52:	90 95       	com	r25
 a54:	8e 0f       	add	r24, r30
 a56:	9f 1f       	adc	r25, r31
 a58:	08 95       	ret

00000a5a <fputc>:
 a5a:	0f 93       	push	r16
 a5c:	1f 93       	push	r17
 a5e:	cf 93       	push	r28
 a60:	df 93       	push	r29
 a62:	8c 01       	movw	r16, r24
 a64:	eb 01       	movw	r28, r22
 a66:	8b 81       	ldd	r24, Y+3	; 0x03
 a68:	81 fd       	sbrc	r24, 1
 a6a:	03 c0       	rjmp	.+6      	; 0xa72 <fputc+0x18>
 a6c:	0f ef       	ldi	r16, 0xFF	; 255
 a6e:	1f ef       	ldi	r17, 0xFF	; 255
 a70:	1a c0       	rjmp	.+52     	; 0xaa6 <fputc+0x4c>
 a72:	82 ff       	sbrs	r24, 2
 a74:	0d c0       	rjmp	.+26     	; 0xa90 <fputc+0x36>
 a76:	2e 81       	ldd	r18, Y+6	; 0x06
 a78:	3f 81       	ldd	r19, Y+7	; 0x07
 a7a:	8c 81       	ldd	r24, Y+4	; 0x04
 a7c:	9d 81       	ldd	r25, Y+5	; 0x05
 a7e:	28 17       	cp	r18, r24
 a80:	39 07       	cpc	r19, r25
 a82:	64 f4       	brge	.+24     	; 0xa9c <fputc+0x42>
 a84:	e8 81       	ld	r30, Y
 a86:	f9 81       	ldd	r31, Y+1	; 0x01
 a88:	01 93       	st	Z+, r16
 a8a:	f9 83       	std	Y+1, r31	; 0x01
 a8c:	e8 83       	st	Y, r30
 a8e:	06 c0       	rjmp	.+12     	; 0xa9c <fputc+0x42>
 a90:	e8 85       	ldd	r30, Y+8	; 0x08
 a92:	f9 85       	ldd	r31, Y+9	; 0x09
 a94:	80 2f       	mov	r24, r16
 a96:	09 95       	icall
 a98:	89 2b       	or	r24, r25
 a9a:	41 f7       	brne	.-48     	; 0xa6c <fputc+0x12>
 a9c:	8e 81       	ldd	r24, Y+6	; 0x06
 a9e:	9f 81       	ldd	r25, Y+7	; 0x07
 aa0:	01 96       	adiw	r24, 0x01	; 1
 aa2:	9f 83       	std	Y+7, r25	; 0x07
 aa4:	8e 83       	std	Y+6, r24	; 0x06
 aa6:	c8 01       	movw	r24, r16
 aa8:	df 91       	pop	r29
 aaa:	cf 91       	pop	r28
 aac:	1f 91       	pop	r17
 aae:	0f 91       	pop	r16
 ab0:	08 95       	ret

00000ab2 <__ultoa_invert>:
 ab2:	fa 01       	movw	r30, r20
 ab4:	aa 27       	eor	r26, r26
 ab6:	28 30       	cpi	r18, 0x08	; 8
 ab8:	51 f1       	breq	.+84     	; 0xb0e <__ultoa_invert+0x5c>
 aba:	20 31       	cpi	r18, 0x10	; 16
 abc:	81 f1       	breq	.+96     	; 0xb1e <__ultoa_invert+0x6c>
 abe:	e8 94       	clt
 ac0:	6f 93       	push	r22
 ac2:	6e 7f       	andi	r22, 0xFE	; 254
 ac4:	6e 5f       	subi	r22, 0xFE	; 254
 ac6:	7f 4f       	sbci	r23, 0xFF	; 255
 ac8:	8f 4f       	sbci	r24, 0xFF	; 255
 aca:	9f 4f       	sbci	r25, 0xFF	; 255
 acc:	af 4f       	sbci	r26, 0xFF	; 255
 ace:	b1 e0       	ldi	r27, 0x01	; 1
 ad0:	3e d0       	rcall	.+124    	; 0xb4e <__ultoa_invert+0x9c>
 ad2:	b4 e0       	ldi	r27, 0x04	; 4
 ad4:	3c d0       	rcall	.+120    	; 0xb4e <__ultoa_invert+0x9c>
 ad6:	67 0f       	add	r22, r23
 ad8:	78 1f       	adc	r23, r24
 ada:	89 1f       	adc	r24, r25
 adc:	9a 1f       	adc	r25, r26
 ade:	a1 1d       	adc	r26, r1
 ae0:	68 0f       	add	r22, r24
 ae2:	79 1f       	adc	r23, r25
 ae4:	8a 1f       	adc	r24, r26
 ae6:	91 1d       	adc	r25, r1
 ae8:	a1 1d       	adc	r26, r1
 aea:	6a 0f       	add	r22, r26
 aec:	71 1d       	adc	r23, r1
 aee:	81 1d       	adc	r24, r1
 af0:	91 1d       	adc	r25, r1
 af2:	a1 1d       	adc	r26, r1
 af4:	20 d0       	rcall	.+64     	; 0xb36 <__ultoa_invert+0x84>
 af6:	09 f4       	brne	.+2      	; 0xafa <__ultoa_invert+0x48>
 af8:	68 94       	set
 afa:	3f 91       	pop	r19
 afc:	2a e0       	ldi	r18, 0x0A	; 10
 afe:	26 9f       	mul	r18, r22
 b00:	11 24       	eor	r1, r1
 b02:	30 19       	sub	r19, r0
 b04:	30 5d       	subi	r19, 0xD0	; 208
 b06:	31 93       	st	Z+, r19
 b08:	de f6       	brtc	.-74     	; 0xac0 <__ultoa_invert+0xe>
 b0a:	cf 01       	movw	r24, r30
 b0c:	08 95       	ret
 b0e:	46 2f       	mov	r20, r22
 b10:	47 70       	andi	r20, 0x07	; 7
 b12:	40 5d       	subi	r20, 0xD0	; 208
 b14:	41 93       	st	Z+, r20
 b16:	b3 e0       	ldi	r27, 0x03	; 3
 b18:	0f d0       	rcall	.+30     	; 0xb38 <__ultoa_invert+0x86>
 b1a:	c9 f7       	brne	.-14     	; 0xb0e <__ultoa_invert+0x5c>
 b1c:	f6 cf       	rjmp	.-20     	; 0xb0a <__ultoa_invert+0x58>
 b1e:	46 2f       	mov	r20, r22
 b20:	4f 70       	andi	r20, 0x0F	; 15
 b22:	40 5d       	subi	r20, 0xD0	; 208
 b24:	4a 33       	cpi	r20, 0x3A	; 58
 b26:	18 f0       	brcs	.+6      	; 0xb2e <__ultoa_invert+0x7c>
 b28:	49 5d       	subi	r20, 0xD9	; 217
 b2a:	31 fd       	sbrc	r19, 1
 b2c:	40 52       	subi	r20, 0x20	; 32
 b2e:	41 93       	st	Z+, r20
 b30:	02 d0       	rcall	.+4      	; 0xb36 <__ultoa_invert+0x84>
 b32:	a9 f7       	brne	.-22     	; 0xb1e <__ultoa_invert+0x6c>
 b34:	ea cf       	rjmp	.-44     	; 0xb0a <__ultoa_invert+0x58>
 b36:	b4 e0       	ldi	r27, 0x04	; 4
 b38:	a6 95       	lsr	r26
 b3a:	97 95       	ror	r25
 b3c:	87 95       	ror	r24
 b3e:	77 95       	ror	r23
 b40:	67 95       	ror	r22
 b42:	ba 95       	dec	r27
 b44:	c9 f7       	brne	.-14     	; 0xb38 <__ultoa_invert+0x86>
 b46:	00 97       	sbiw	r24, 0x00	; 0
 b48:	61 05       	cpc	r22, r1
 b4a:	71 05       	cpc	r23, r1
 b4c:	08 95       	ret
 b4e:	9b 01       	movw	r18, r22
 b50:	ac 01       	movw	r20, r24
 b52:	0a 2e       	mov	r0, r26
 b54:	06 94       	lsr	r0
 b56:	57 95       	ror	r21
 b58:	47 95       	ror	r20
 b5a:	37 95       	ror	r19
 b5c:	27 95       	ror	r18
 b5e:	ba 95       	dec	r27
 b60:	c9 f7       	brne	.-14     	; 0xb54 <__ultoa_invert+0xa2>
 b62:	62 0f       	add	r22, r18
 b64:	73 1f       	adc	r23, r19
 b66:	84 1f       	adc	r24, r20
 b68:	95 1f       	adc	r25, r21
 b6a:	a0 1d       	adc	r26, r0
 b6c:	08 95       	ret

00000b6e <__prologue_saves__>:
 b6e:	2f 92       	push	r2
 b70:	3f 92       	push	r3
 b72:	4f 92       	push	r4
 b74:	5f 92       	push	r5
 b76:	6f 92       	push	r6
 b78:	7f 92       	push	r7
 b7a:	8f 92       	push	r8
 b7c:	9f 92       	push	r9
 b7e:	af 92       	push	r10
 b80:	bf 92       	push	r11
 b82:	cf 92       	push	r12
 b84:	df 92       	push	r13
 b86:	ef 92       	push	r14
 b88:	ff 92       	push	r15
 b8a:	0f 93       	push	r16
 b8c:	1f 93       	push	r17
 b8e:	cf 93       	push	r28
 b90:	df 93       	push	r29
 b92:	cd b7       	in	r28, 0x3d	; 61
 b94:	de b7       	in	r29, 0x3e	; 62
 b96:	ca 1b       	sub	r28, r26
 b98:	db 0b       	sbc	r29, r27
 b9a:	0f b6       	in	r0, 0x3f	; 63
 b9c:	f8 94       	cli
 b9e:	de bf       	out	0x3e, r29	; 62
 ba0:	0f be       	out	0x3f, r0	; 63
 ba2:	cd bf       	out	0x3d, r28	; 61
 ba4:	09 94       	ijmp

00000ba6 <__epilogue_restores__>:
 ba6:	2a 88       	ldd	r2, Y+18	; 0x12
 ba8:	39 88       	ldd	r3, Y+17	; 0x11
 baa:	48 88       	ldd	r4, Y+16	; 0x10
 bac:	5f 84       	ldd	r5, Y+15	; 0x0f
 bae:	6e 84       	ldd	r6, Y+14	; 0x0e
 bb0:	7d 84       	ldd	r7, Y+13	; 0x0d
 bb2:	8c 84       	ldd	r8, Y+12	; 0x0c
 bb4:	9b 84       	ldd	r9, Y+11	; 0x0b
 bb6:	aa 84       	ldd	r10, Y+10	; 0x0a
 bb8:	b9 84       	ldd	r11, Y+9	; 0x09
 bba:	c8 84       	ldd	r12, Y+8	; 0x08
 bbc:	df 80       	ldd	r13, Y+7	; 0x07
 bbe:	ee 80       	ldd	r14, Y+6	; 0x06
 bc0:	fd 80       	ldd	r15, Y+5	; 0x05
 bc2:	0c 81       	ldd	r16, Y+4	; 0x04
 bc4:	1b 81       	ldd	r17, Y+3	; 0x03
 bc6:	aa 81       	ldd	r26, Y+2	; 0x02
 bc8:	b9 81       	ldd	r27, Y+1	; 0x01
 bca:	ce 0f       	add	r28, r30
 bcc:	d1 1d       	adc	r29, r1
 bce:	0f b6       	in	r0, 0x3f	; 63
 bd0:	f8 94       	cli
 bd2:	de bf       	out	0x3e, r29	; 62
 bd4:	0f be       	out	0x3f, r0	; 63
 bd6:	cd bf       	out	0x3d, r28	; 61
 bd8:	ed 01       	movw	r28, r26
 bda:	08 95       	ret

00000bdc <_exit>:
 bdc:	f8 94       	cli

00000bde <__stop_program>:
 bde:	ff cf       	rjmp	.-2      	; 0xbde <__stop_program>
